/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package top;

import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.Scanner;

/**
 *
 * @author dudes
 */
public class Top extends javax.swing.JFrame {

    /**
     * Creates new form Top
     */
    
    String filepath = "database.txt";
    int dayOfMonth;
    int monthOfYear;
    
    YearMonth january   = YearMonth.of(2021, 1); 
    YearMonth february  = YearMonth.of(2021, 2); 
    YearMonth march     = YearMonth.of(2021, 3); 
    YearMonth april     = YearMonth.of(2021, 4); 
    YearMonth may       = YearMonth.of(2021, 5); 
    YearMonth june      = YearMonth.of(2021, 6); 
    YearMonth july      = YearMonth.of(2021, 7); 
    YearMonth august    = YearMonth.of(2021, 8); 
    YearMonth september = YearMonth.of(2021, 9); 
    YearMonth october   = YearMonth.of(2021, 10); 
    YearMonth november  = YearMonth.of(2021, 11); 
    YearMonth december  = YearMonth.of(2021, 12); 
    
    Month januaryMonth   = new Month(january);
    Month februaryMonth  = new Month(february);
    Month marchMonth     = new Month(march);
    Month aprilMonth     = new Month(april);
    Month mayMonth       = new Month(may);
    Month juneMonth      = new Month(june);
    Month julyMonth      = new Month(july);
    Month augustMonth    = new Month(august);
    Month septemberMonth = new Month(september);
    Month octoberMonth   = new Month(october);
    Month novemberMonth  = new Month(november);
    Month decemberMonth  = new Month(december);
    
    Month[] months = new Month[]{ januaryMonth, februaryMonth, marchMonth,
        aprilMonth, mayMonth, juneMonth, julyMonth, augustMonth, 
        septemberMonth, octoberMonth, novemberMonth, decemberMonth };
    
 
    
    public Top() {
        initComponents();
        this.monthViewPanel1.feed(new Month(YearMonth.now()));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jTabbedPane2 = new javax.swing.JTabbedPane();
        jPanel3 = new javax.swing.JPanel();
        inputView1 = new top.InputView();
        jPanel1 = new javax.swing.JPanel();
        monthViewPanel1 = new top.MonthViewPanel();
        jPanel2 = new javax.swing.JPanel();
        weekViewPanel1 = new top.WeekViewPanel();
        itenerary1 = new top.Itenerary();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenu2 = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel3.setLayout(new java.awt.GridBagLayout());
        jPanel3.add(inputView1, new java.awt.GridBagConstraints());

        jTabbedPane2.addTab("Add Event", jPanel3);

        jPanel1.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 1.0;
        jPanel1.add(monthViewPanel1, gridBagConstraints);

        jTabbedPane2.addTab("Month", jPanel1);

        jPanel2.setLayout(new java.awt.GridBagLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 1.0;
        jPanel2.add(weekViewPanel1, gridBagConstraints);
        jPanel2.add(itenerary1, new java.awt.GridBagConstraints());

        jTabbedPane2.addTab("Week", jPanel2);

        getContentPane().add(jTabbedPane2, "card2");
        jTabbedPane2.getAccessibleContext().setAccessibleName("Month");

        jMenu1.setText("File");
        jMenuBar1.add(jMenu1);

        jMenu2.setText("Edit");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Top.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Top.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Top.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Top.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Top().setVisible(true);
            }
        });
        
    }
    
    public void writeToFile() throws IOException
    {
            try {
                FileWriter fo = new FileWriter(filepath);
		FileOutputStream fileOut = new FileOutputStream(filepath);
		ObjectOutputStream objectOut = new ObjectOutputStream(fileOut);
			
		for (int i = 0; i < months.length; i++)
		{
                        for (int j = 0; j < months[i].length; j++)
                        {
                            Day dayTest = (Day) months[i].getDay(j); 
                            for (int k = 0; k < dayTest.activityList.size(); k++)
                            {
                                if (dayTest.hasContent)
                                {
                                    Activity curAct = (Activity) dayTest.activityList.get(j);
                                    switch (curAct.extraInfo) {
                                        case "school":
                                                School x = (School) curAct;
                                                objectOut.writeObject(x.getExtraInfo());
                                                objectOut.writeObject(x);
                                                break;
                                        case "workout":
                                                Workout w = (Workout) curAct;
                                                objectOut.writeObject(w.getExtraInfo());
                                                objectOut.writeObject(w);
                                                break;
                                        default:
                                                objectOut.writeObject(curAct.getExtraInfo());
                                                objectOut.writeObject(curAct);
                                                break;
                                }
                            }
                        }
		}
		
		objectOut.close();
		fo.close();
            }
            }
            
            catch (Exception ex) {
		ex.printStackTrace();
            }
    }
    
    public void pullFromFile()
    {
        Object testIn;
        boolean y = true;
        try {
            FileInputStream fileIn = new FileInputStream(filepath);
            ObjectInputStream objectIn = new ObjectInputStream(fileIn);
            
            	while (fileIn.available() > 0)
            	{
				
                    testIn = objectIn.readObject();
                    if (testIn == null)
                    {
                        y = false;
                    }
                    String x = testIn.toString();
		
                    switch(x) {
                        case "school":
                            School sTest = new School();
                            sTest = (School) objectIn.readObject();
                            monthOfYear = sTest.getDate().getMonthValue();
                            monthOfYear--;
                            dayOfMonth = sTest.getDate().getDayOfMonth();
                            months[monthOfYear].getDay(dayOfMonth).Add(sTest);
                            break;
			case "workout":
                            Workout wTest = new Workout();
                            wTest = (Workout) objectIn.readObject();
                            monthOfYear = wTest.getDate().getMonthValue();
                            monthOfYear--;
                            dayOfMonth = wTest.getDate().getDayOfMonth();
                            months[monthOfYear].getDay(dayOfMonth).Add(wTest);
                            break;
                        default:
                            Activity aTest = new Activity();
                            aTest = (Activity) objectIn.readObject();
                            monthOfYear = aTest.getDate().getMonthValue();
                            monthOfYear--;
                            dayOfMonth = aTest.getDate().getDayOfMonth();
                            months[monthOfYear].getDay(dayOfMonth).Add(aTest);
                            break;
                        }	
				//System.out.println();
                }
                
                objectIn.close();
            }
		
		catch (Exception ex) {
			ex.printStackTrace();
		}
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private top.InputView inputView1;
    private top.Itenerary itenerary1;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JTabbedPane jTabbedPane2;
    private top.MonthViewPanel monthViewPanel1;
    private top.WeekViewPanel weekViewPanel1;
    // End of variables declaration//GEN-END:variables
}
